#!/usr/bin/env bash
set -euo pipefail

# Release script for Cadabra (TypeScript)
# Quality checks are performed by GitHub Actions CI

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

function print_usage() {
    cat <<EOF
Usage: $0 <version> [--dry-run]

Create a new release of Cadabra packages.

Arguments:
  version       Version number in semver format (e.g., 1.0.0)
  --dry-run     Show what would be done without making changes

Examples:
  $0 1.0.0           # Create release
  $0 1.2.3 --dry-run # Preview release

This script will:
  1. Validate version format
  2. Check git working directory is clean
  3. Update version in package.json
  4. Update CHANGELOG.md
  5. Create git commit and tag
  6. Push to GitHub

Quality checks (linting, tests, type checking) are performed by
GitHub Actions CI after you push. The tag push will trigger:
  - CI workflow (quality checks)
  - Release automation (GitHub Release creation)
  - NPM publishing
  - Docker image publishing
  - Packagist auto-update
EOF
}

function error() {
    echo -e "${RED}✗ Error: $1${NC}" >&2
    exit 1
}

function success() {
    echo -e "${GREEN}✓ $1${NC}"
}

function info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

function warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

function step() {
    echo -e "\n${BLUE}==>${NC} $1"
}

function validate_version() {
    local version=$1
    if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        error "Invalid version format. Use semver (e.g., 1.0.0)"
    fi
}

function check_git_clean() {
    step "Checking git working directory..."

    if [[ ! -d "$ROOT_DIR/.git" ]]; then
        error "Not a git repository"
    fi

    if ! git diff-index --quiet HEAD --; then
        error "Working directory is not clean. Commit or stash changes first."
    fi

    success "Git working directory is clean"
}

function update_package_json() {
    local version=$1
    local file="$ROOT_DIR/packages/cadabra/package.json"

    step "Updating package.json version to $version..."

    if [[ "$DRY_RUN" == "true" ]]; then
        info "[DRY RUN] Would update $file"
        return
    fi

    # Use bun to update version (preserves formatting)
    (cd "$ROOT_DIR/packages/cadabra" && bun --bun version "$version" --no-git-tag-version) >/dev/null 2>&1 || {
        # Fallback to sed if bun version fails
        sed -i.bak "s/\"version\": \".*\"/\"version\": \"$version\"/" "$file"
        rm -f "${file}.bak"
    }

    success "Updated package.json"
}

function update_changelog() {
    local version=$1
    local changelog="$ROOT_DIR/CHANGELOG.md"
    local date=$(date +%Y-%m-%d)

    step "Updating CHANGELOG.md..."

    if [[ "$DRY_RUN" == "true" ]]; then
        info "[DRY RUN] Would add v$version entry to CHANGELOG.md"
        return
    fi

    # Check if changelog exists
    if [[ ! -f "$changelog" ]]; then
        error "CHANGELOG.md not found at $changelog"
    fi

    # Check if version already exists
    if grep -q "## \[$version\]" "$changelog"; then
        warning "Version $version already exists in CHANGELOG.md"
        return
    fi

    # Create temporary file with new entry
    local temp_file=$(mktemp)

    # Add new version entry after the first heading
    awk -v version="$version" -v date="$date" '
        /^## / && !inserted {
            print "## [" version "] - " date
            print ""
            print "### Added"
            print "- Release version " version
            print ""
            inserted = 1
        }
        { print }
    ' "$changelog" > "$temp_file"

    mv "$temp_file" "$changelog"

    success "Updated CHANGELOG.md"
}

function create_git_commit() {
    local version=$1

    step "Creating git commit..."

    if [[ "$DRY_RUN" == "true" ]]; then
        info "[DRY RUN] Would create commit with message: 'chore: release v$version'"
        return
    fi

    git add packages/cadabra/package.json CHANGELOG.md
    git commit -m "chore: release v$version

- Update version to $version
- Update CHANGELOG.md

Generated by release script"

    success "Created git commit"
}

function create_git_tag() {
    local version=$1

    step "Creating git tag v$version..."

    if [[ "$DRY_RUN" == "true" ]]; then
        info "[DRY RUN] Would create tag: v$version"
        return
    fi

    git tag -a "v$version" -m "Release v$version"

    success "Created git tag v$version"
}

function push_to_github() {
    local version=$1

    step "Pushing to GitHub..."

    if [[ "$DRY_RUN" == "true" ]]; then
        info "[DRY RUN] Would push main branch and v$version tag"
        return
    fi

    # Check if we have a remote
    if ! git remote get-url origin >/dev/null 2>&1; then
        error "No 'origin' remote configured"
    fi

    info "Pushing main branch..."
    git push origin main || error "Failed to push main branch"

    info "Pushing tag v$version..."
    git push origin "v$version" || error "Failed to push tag"

    success "Pushed to GitHub"
}

function show_next_steps() {
    local version=$1

    step "Release v$version created successfully!"

    echo ""
    echo -e "${GREEN}GitHub Actions will now automatically:${NC}"
    echo "  1. Run CI checks (lint, test, type check)"
    echo "  2. Create GitHub Release with notes"
    echo "  3. Publish to NPM"
    echo "  4. Build and push Docker images"
    echo "  5. Trigger Packagist update"
    echo ""
    echo -e "${BLUE}Monitor progress at:${NC}"
    echo "  https://github.com/SebastiaanWouters/cadabra/actions"
    echo ""
    echo -e "${YELLOW}Important:${NC} If CI checks fail, the release will not be published."
    echo "You can delete the tag and fix issues if needed:"
    echo "  git tag -d v$version"
    echo "  git push origin :refs/tags/v$version"
    echo ""
}

# ============================================================================
# MAIN
# ============================================================================

function main() {
    # Parse arguments
    VERSION=""
    DRY_RUN="false"

    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                print_usage
                exit 0
                ;;
            --dry-run)
                DRY_RUN="true"
                shift
                ;;
            *)
                if [[ -z "$VERSION" ]]; then
                    VERSION=$1
                else
                    error "Unknown argument: $1"
                fi
                shift
                ;;
        esac
    done

    # Validate arguments
    if [[ -z "$VERSION" ]]; then
        print_usage
        exit 1
    fi

    if [[ "$DRY_RUN" == "true" ]]; then
        warning "DRY RUN MODE - No changes will be made"
    fi

    # Show what we're doing
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}   Cadabra Release Script v$VERSION"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""

    # Execute release steps
    validate_version "$VERSION"
    check_git_clean
    update_package_json "$VERSION"
    update_changelog "$VERSION"
    create_git_commit "$VERSION"
    create_git_tag "$VERSION"
    push_to_github "$VERSION"

    if [[ "$DRY_RUN" == "false" ]]; then
        show_next_steps "$VERSION"
    else
        echo ""
        warning "DRY RUN completed - no changes were made"
        echo "Run without --dry-run to create the release"
    fi
}

main "$@"
