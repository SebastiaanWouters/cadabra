name: CI/CD

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Cancel in-progress runs for same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sebastiaanwouters/cadabra

jobs:
  # =============================================================================
  # Quality Checks (always run)
  # =============================================================================

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3"

      - name: Install dependencies
        run: bun install

      - name: Run Biome linter
        run: bun run check

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3"

      - name: Install dependencies
        run: bun install

      - name: Type check
        run: bun run tsc

      - name: Run core tests
        run: bun run test:cadabra

      - name: Setup integration test database
        working-directory: packages/integration-tests
        run: bun run setup

      - name: Run integration tests
        run: bun run test:integration

      - name: Run benchmarks
        run: bun run bench
        continue-on-error: true

  # =============================================================================
  # Docker (always run after tests pass)
  # =============================================================================

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cadabra
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Test image
        run: |
          docker run --rm -d -p 6942:6942 --name cadabra-test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$(git rev-parse --short HEAD)
          sleep 5
          curl -f http://localhost:6942/health || exit 1
          docker stop cadabra-test

  # =============================================================================
  # GitHub Release (only on tags)
  # =============================================================================

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}
          awk '/^## \['$VERSION'\]/, /^## \[/ {
            if (/^## \['$VERSION'\]/) { found=1; next }
            if (/^## \[/ && found) { exit }
            if (found) print
          }' CHANGELOG.md > /tmp/release-notes.md

          if [ ! -s /tmp/release-notes.md ]; then
            echo "Release version $VERSION" > /tmp/release-notes.md
            echo "" >> /tmp/release-notes.md
            echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details." >> /tmp/release-notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: /tmp/release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # NPM Publish (only on tags)
  # =============================================================================

  npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3"

      - name: Install dependencies
        run: bun install

      - name: Check NPM token
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ ERROR: NPM_TOKEN secret is not set!"
            echo "Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          echo "✓ NPM_TOKEN is set"

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Build package
        working-directory: packages/cadabra
        run: bun run tsc --noEmit

      - name: Publish to NPM
        working-directory: packages/cadabra
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
